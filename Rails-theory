>> User.find(2) # raises an exception
>> User.find_by_id(2) # nil
>> User.where(id: 2).first # nil

what is has and belongs to 
https://stackoverflow.com/questions/2780798/has-and-belongs-to-many-vs-has-many-through#:~:text=As%20far%20as%20I%20can,Categories_Stories%20Table%20story_id%20%7C%20category_id

what is includes and joins db(this prefers lazy and eager loading)
https://medium.com/@swapnilggourshete/rails-includes-vs-joins-9bf3a8ada00#:~:text=Includes%20uses%20eager%20loading%20whereas,be%20performed%20on%20associated%20tables.

what is after create and after save
https://stackoverflow.com/questions/33890458/difference-between-after-create-after-save-and-after-commit-in-rails-callbacks#:~:text=The%20difference%20between%20after_create%20%2C%20after_save,called%20when%20creating%20an%20object

Rails interview questions
https://career.guru99.com/top-34-ruby-on-rail-interview-questions/

Very Important for active record RDBMS to make robust application
https://guides.rubyonrails.org/active_record_querying.html#specifying-conditions-on-the-joined-tables

what is html_safe?

#callback and observer

#dynamic scaffold and static scaffolding

# User.find(4) User.find_by(4) User.find_by(id: 4) User.find_by_id(4) User.where(id: 4)

; rails methods below

; "".blank? #true

; "".present? #false

# [[1,2,3]].flatten [[1,2,3]].flatten!

what is rake?



what is delete and destroy in rails?

Basically destroy runs any callbacks on the model while delete doesn't.

From the Rails API:

ActiveRecord::Persistence.delete

Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can't be persisted). Returns the frozen instance.

The row is simply removed with an SQL DELETE statement on the record's primary key, and no callbacks are executed.

To enforce the object's before_destroy and after_destroy callbacks or any :dependent association options, use #destroy.

ActiveRecord::Persistence.destroy

Deletes the record in the database and freezes this instance to reflect that no changes should be made (since they can't be persisted).

There's a series of callbacks associated with destroy. If the before_destroy callback return false the action is cancelled and destroy returns false. See ActiveRecord::Callbacks for further details.






Rails 5 features compare to rails 4

1. API only mode
=> generate api only app in rails, rails-api gem is merged into Rails.
		rails new my-api-only-app — api
=> It creates an app that generates JSON responsed instead of HTML.

2. ActionCable

3. Inheriting ApplicationRecord
=> All models will inherit from ApplicationRecord, not from ActiveRecord::Base
	class Post < ApplicationRecord
	end

4. Active Record Attributes API
=> Defines an attribute with a type on a model. which helps overriding the type of existing attributes if needed.
=> It controls how values are converted to and from SQL when assigned to a model.
	class Item < ApplicationRecord
  		attribute :price_in_cents, MoneyType.new
	end

	class MoneyType < ActiveRecord::Type::Integer
 		def type_cast(value)
   			#logic to implement ‘$2.00’ to 100
 		end
	end

item = Item.new(price_in_cents: ‘$2.00’)
item.price_in_cents #=> 100

5. has_secure_token method inclusion
	Rails 5 has added has_secure_token method to generate a random alphanumeric token for a given column.
		class User < ApplicationRecord
 			has_secure_token :token1
		end

		user = User.create
		user.token1 #=> ‘e2426a93718d1817a43abbaa’
		user.regenerate_token1

6. Rake to Rails

Rails 5 now requires Ruby 2.2.2 or greater



What is turbo links?

Turbolinks is a flexible and lightweight JavaScript library aimed to make your navigation through webpages faster. Turbolinks improves webpage performance by substituting the common full-page loads for partial loads in multi-page applications



# ---------------------------------------------------------------------------------------------------------------------------------------------------------



Rails 6 features compare to rails 5

1.Credentials in Rails 6
   Having master key to encrypt and decrypt
2.Webpack 
3.Supporting multiple databases

* Rails 6 require Ruby version 2.5 or greater.




# ---------------------------------------------------------------------------------------------------------------------------------------------------------




Rails 7 features compare to rails 6
1. Asynchronous Querying
	Developers can now use the load_async method while querying data to fetch results. This is time-savvy when asking multiple queries 		together. Using this, you can run-
		def PostsController
			def index
				@posts = Post.load_async
				@categories = Category.load_async
			end
		end
This will fire two queries together. So, if each query took you 200ms, the total time fetching two results here would be 200 ms only, not 400 ms.

2. Encrypted Database Layer
	Rail 7 allows developers to encrypt certain database fields using the encrypts method on the ActiveRecord::Base. This means that after 		your initial setup, you have to write a code like this-
		class Message < ApplicationRecord
			encrypts :text
		end
The encrypted attributes are like any other attribute. Rails 7 will automatically encrypt and decrypt your application and its database.

3. Webpack and Node are not required.

4. UJS and Turbolinks is now replaced Stimulus and Turbo
Applications using Rails 7 will now get Stimulus and Turbo (from Hotwire) from default. Hotwire is a modern approach to building web applications using minimal JavaScript by sending HTML and not JSON over the wire.

